%p#notice= notice


%section#filters
  .home= link_to 'Nguoi Dep', root_path

  .select_issue.filter
    = label_tag :select_id, "Select issue:"
    = select_tag :issue_id, options_for_select(Issue.all_issues_with_id, @issue.id)

  .select_page.filter
    = label_tag :page_nr, "Select page:"
    = select_tag(:page_nr, options_for_select((1..@issue.pages.size).to_a) )

  #companies.filter
    = label_tag :company_id, "Or show pages with an ad for:"
    = select_tag :company_id, options_for_select([['select a company', 0]] + @issue.companies)
    %ul.pages

#magazine_container
  #magazine
    - @issue.first_pages.each do |page|
      %div{ :style => "background-image:url(#{page.url});", :class => "hard" }

  .page_nr_left.page_nr
  .turn_page.turn_page_left= link_to "<"
  .page_nr_right.page_nr
  .turn_page.turn_page_right= link_to ">"

  #zoomer
    %img
    .close
      = link_to 'close', class: 'button'

:javascript
  $(window).ready(function() {

    $("#company_id").change( function(event) {
      var company_id = $("#company_id option:selected").val()
      var pages_list = $("#companies ul.pages")
      if (company_id == 0) {
        pages_list.empty()
        return
      }

      var url = "/issues/#{@issue.id}/pages.json?company_id=" + company_id
      $.getJSON(url, function(response, status, xhr) {
        pages_list.empty()
        if (status=="success") {
          $.each(response.pages, function(key, val) {
            pages_list.append('<li><a href="#">' + val + '<a/></li>')
          })
          pages_list.find('li a').click( function(event){
            var page_nr = $(this).text()
            $("#magazine").turn("page", page_nr);
          })
        }
        else {
          pages_list.append('<li>error retrieving pages</li>')
        }
      })
    })

    function addPage(page, book) {
      // check if the page is already in the book
      if (!book.turn('hasPage', page)) {
        // Create an element for this page
        var element = $('<div />', {'class': 'page '+((page%2==0) ? 'odd' : 'even'), 'id': 'page-'+page}).html('<i class="loader"></i>');
        var url = "/issues/#{@issue.id}/pages/" + page + ".json"
        $.getJSON(url, function(response, status, xhr) {
          if (status == "error") {
            element.html('<i class="error">Error loading the next page.</i>')
            book.turn('addPage', element, page); // add element to book
          }
          else if (response != "eoi" /* end of magazine */ ) {
            element.css("background-image", "url(" + response.image + ")")
            book.turn('addPage', element, page); // add element to book
          }
        });
      }
    }

    $('#magazine').turn({
      display: 'double',
      pages: "#{@issue.pages.size}",
      acceleration: true,
      gradients: !$.isTouch,
      elevation:50,
      when: {
        turned: function(e, page) {
          var current_pages = $(this).turn('view')
          console.log('Current view: ', current_pages);
          var left_page = current_pages[0]
          var right_page = current_pages[1]
          $("#page_nr").val()
          if (left_page > 0){
            $(".page_nr_left").text(left_page).show()
            $(".turn_page_left").show()
          }
          else {
            $(".page_nr_left").hide()
            $(".turn_page_left").hide()
          }
          if (right_page > 0)
            $(".page_nr_right").text(right_page).show()
          else
            $(".page_nr_right").hide()
          var last_page = $(this).turn("pages")
          if (left_page == last_page || right_page == last_page)
            $(".turn_page_right").hide();
          else
            $(".turn_page_right").show();

          $(".page_nr_right").text(current_pages[1])
        },
        turning: function(e, page, view) {
          console.log('turning')
          zoom_off();
          // Gets the range of pages that the book needs right now
          var range = $(this).turn('range', page);
          // Check if each page is within the book
          for (page = range[0]; page<=range[1]; page++)
              addPage(page, $(this));
        },
      }
    });
  });

  $(window).bind('keydown', function(e){
    if (e.keyCode==37)
      $('#magazine').turn('previous');
    else if (e.keyCode==39)
      $('#magazine').turn('next');
  });

  var page_corner = new function(){
    this.magazine_left  = $('#magazine').offset().left;
    this.magazine_top   = $('#magazine').offset().top
    this.magazine_width = $('#magazine').width();
    this.magazine_height= $('#magazine').height();
    this.triangle_width = 60;   // that's about the corner size
    this.isActive = function(event) {
      var position = this.getPositionRelativeToMagazine(event.pageX, event.pageY)
      var inCorner = this.isPositionInCorner(position)
      return inCorner;
    };
    this.getPositionRelativeToMagazine = function(x, y){
      return {left: x - this.magazine_left,
              top:  y - this.magazine_top}
    }
    this.isPositionInCorner = function(pos){
      var maxTop = maxLeft = this.triangle_width;
      var maxRight = this.magazine_width - this.triangle_width;
      var maxBottom = this.magazine_height - this.triangle_width;
      return (pos.left < maxLeft && pos.top < maxTop)    ||    // top left
             (pos.left > maxRight && pos.top < maxTop)   ||    // top right
             (pos.left < maxLeft && pos.top > maxBottom) ||    // bottom left
             (pos.left > maxRight && pos.top > maxBottom)      // bottom right
    }
  }

  $('#magazine').on('click', '.turn-page-wrapper', function(e) {
     console.log('turn-page-wrapper click: page_corner.isActive(e): ' + page_corner.isActive(e));
     if (page_corner.isActive(e)) {
       e.stopImmediatePropagation();
       return;
     }
     var src, url;
     var url = $(this).find('.turn-page').css('background-image');
     var src = url.replace('url(', '').replace(')', '');
     zoom_on();
     $('#zoomer img').attr('src', src);
     set_position_close_div();
   });

  function set_position_close_div() {
    var zoomer = $('#zoomer');
    var close_div = zoomer.find('.close');
    var top = zoomer.offset().top;
    var left = zoomer.offset().left + zoomer.width() - close_div.width() - 20;
    close_div.css('top', top).css('left', left);
  }

  function zoom_on() {
    $('#magazine').hide();
    return $('#zoomer').show();
  };

  function zoom_off() {
    $('#zoomer').hide();
    return $('#magazine').show();
  };

  $('#zoomer').on('click', '.close a', function(e){
    var page_nr = $("#magazine").turn("page", page_nr);
    zoom_off();
    return false;
  })

  $('#magazine').mouseover(function(e){
    if (page_corner.isActive(e)){
      $('#magazine').removeClass('zoom_in');
      return;
    }
    $('#magazine').addClass('zoom_in');
  })
  .mouseout(function(){
    $('#magazine').removeClass('zoom_in');
  })

